
Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    43                                           @func_line_time
    44                                           # 定义一个测试函数
    45                                           def display():
    46         1         19.0     19.0      0.0    txt_path = '../txtcouldpoint/Depth_L5000_t220802_104306_01111.txt'
    47         1         27.0     27.0      0.0    start_time = time.time()
    48                                             # 通过numpy读取txt点云
    49         1  273994324.0 273994324.0     72.3    pcd_1 = np.genfromtxt(txt_path, delimiter=",")
    50         1        757.0    757.0      0.0    pcd = o3d.geometry.PointCloud()
    51         1        782.0    782.0      0.0    print(pcd_1.shape)
    52
    53                                             # 加载点坐标
    54         1     159656.0 159656.0      0.0    pcd.points = o3d.utility.Vector3dVector(pcd_1)
    55
    56         1        207.0    207.0      0.0    end_time = time.time()
    57         1        838.0    838.0      0.0    print(end_time - start_time)
    58
    59         1      60209.0  60209.0      0.0    pcd = pcd.translate((0, 0, 0), relative=False)
    60
    61                                             # 用PCA分析点云主方向
    62         1     342517.0 342517.0      0.1    w, v = xyz1.PCA(pcd.points)  # PCA方法得到对应的特征值和特征向量
    63         1         25.0     25.0      0.0    point_cloud_vector = v[:, 0]  # 点云主方向对应的向量为最大特征值对应的特征向量
    64         1       4016.0   4016.0      0.0    print('the main orientation of this pointcloud is: ', point_cloud_vector)
    65                                             # print('v',v)
    66                                             # 三个特征向量组成了三个坐标轴
    67                                             # axis = o3d.geometry.TriangleMesh.create_coordinate_frame().rotate(v, center=(0, 0, 0))
    68                                             # pc_view = o3d.geometry.PointCloud(points=o3d.utility.Vector3dVector(pcd.points))
    69                                             # # 可视化
    70                                             # o3d.visualization.draw_geometries([pc_view, axis], point_show_normal=True)
    71
    72                                             # 下采样
    73         1      59276.0  59276.0      0.0    pcd = pcd.uniform_down_sample(50)
    74                                             # pcd = pcd.random_down_sample(0.02)
    75                                             # point = np.asarray(pcd.points)
    76                                             # xyz1.visualizer_cloud(pcd)
    77
    78                                             # pcd.paint_uniform_color([0, 1, 0])
    79                                             # points = pcd.points
    80                                             #
    81                                             # #加载完成
    82
    83                                             # ------------------------- 统计滤波 --------------------------
    84         1        354.0    354.0      0.0    print("->正在进行统计滤波...")
    85         1         63.0     63.0      0.0    astart = time.time()
    86         1         10.0     10.0      0.0    num_neighbors = 20  # K邻域点的个数
    87         1          8.0      8.0      0.0    std_ratio = 2.0  # 标准差乘数
    88                                             # 执行统计滤波，返回滤波后的点云sor_pcd和对应的索引ind
    89         1     208651.0 208651.0      0.1    sor_pcd, ind = pcd.remove_statistical_outlier(num_neighbors, std_ratio)
    90         1         31.0     31.0      0.0    bstartime = time.time()
    91         1        205.0    205.0      0.0    print("统计滤波", bstartime - astart)
    92                                             # akkk=[]
    93                                             # for i in ind:
    94                                             #   print(pcd.points[i][2])
    95                                             #   akkk.append(pcd.points[i][2])
    96                                             #
    97                                             # akkk=np.asarray(akkk)
    98                                             # print(akkk.min(),akkk.max(),akkk.mean())
    99                                             # 可视化统计滤波后的点云和噪声点云
   100                                             # display_inlier_outlier(pcd, ind)
   101
   102         1        778.0    778.0      0.0    pcd = sor_pcd
   103         1         81.0     81.0      0.0    points = pcd.points
   104         1         99.0     99.0      0.0    point = np.asarray(points)
   105
   106                                             # -62.235174832472566 63.63087516752742
   107
   108                                             # 2.计算P1,P2,P3三点确定的平面，以此作为切片
   109         1         10.0     10.0      0.0    tank1 = -62.23 + 1
   110         1         17.0     17.0      0.0    astart = time.time()
   111         1       5459.0   5459.0      0.0    print(point)
   112        64        666.0     10.4      0.0    while (tank1 < 63.63 - 0.1):
   113        63       1962.0     31.1      0.0      P2 = np.array([tank1, 0, 0])  # xyz
   114                                               # a, b, c, d = plane_param(point_cloud_vector,P2)
   115        63       3290.0     52.2      0.0      a, b, c, d = xyz1.plane_param(v[:, 0], P2)
   116        63        810.0     12.9      0.0      point_size = point.shape[0]
   117        63       1482.0     23.5      0.0      idx = []
   118                                               # 3.设置切片厚度阈值，此值为切片厚度的一半
   119        63        524.0      8.3      0.0      Delta = 0.5
   120                                               # 4.循环迭代查找满足切片的点
   121   1966041   15426047.0      7.8      4.1      for i in range(point_size):
   122   1965978   34485951.0     17.5      9.1        Wr = a * point[i][0] + b * point[i][1] + c * point[i][2] + d - Delta
   123   1965978   34317020.0     17.5      9.1        Wl = a * point[i][0] + b * point[i][1] + c * point[i][2] + d + Delta
   124   1965978   19230279.0      9.8      5.1        if Wr * Wl <= 0:
   125     14270     130233.0      9.1      0.0          idx.append(i)
   126                                               # 5.提取切片点云
   127        63      35176.0    558.3      0.0      slicing_cloud = (pcd.select_by_index(idx))
   128        63       9935.0    157.7      0.0      slicing_points = np.asarray(slicing_cloud.points)
   129
   130        63        845.0     13.4      0.0      project_pane = [a, b, c, d]
   131        63      32657.0    518.4      0.0      points_new = xyz1.point_project_array(slicing_points, project_pane)
   132        63       9848.0    156.3      0.0      pc_view = o3d.geometry.PointCloud(points=o3d.utility.Vector3dVector(points_new))
   133                                               # xyz1.Point_Show(points_new)
   134
   135                                               # 转化xy轴
   136        63      26654.0    423.1      0.0      h1, h2, h3 = xyz1.Router(v)
   137        63       4867.0     77.3      0.0      R1 = pcd.get_rotation_matrix_from_xyz((h1, h2, h3))
   138        63       3327.0     52.8      0.0      R2 = pcd.get_rotation_matrix_from_xyz((0, np.pi / 2, 0))
   139        63       4231.0     67.2      0.0      pc_view.rotate(R1)
   140                                               # pc_view.rotate(R2)
   141        63       2752.0     43.7      0.0      poi = np.asarray(pc_view.points)
   142                                               # xyz1.Point_Show(poi)
   143        63       1840.0     29.2      0.0      poi_x = poi[:, 0]
   144        63      60460.0    959.7      0.0      pre_sort_x = sorted(enumerate(poi_x), key=lambda poi_x: poi_x[1])
   145        63       2064.0     32.8      0.0      sorted_poi = np.zeros((poi.shape))
   146     14333     101700.0      7.1      0.0      for i in range(len(poi_x)):
   147     14270     152181.0     10.7      0.0        sorted_poi[i] = poi[pre_sort_x[i][0]]
   148
   149        63        845.0     13.4      0.0      x = sorted_poi[:, 0]
   150                                               # print(sorted_poi,sorted_poi)
   151        63        678.0     10.8      0.0      y = sorted_poi[:, 1]
   152        63       2446.0     38.8      0.0      x = x - x[0]
   153        63       1400.0     22.2      0.0      y = y - y[0]
   154
   155        63     164714.0   2614.5      0.0      z1 = np.polyfit(x, y, 5)  # 曲线拟合，返回值为多项式的各项系数
   156        63      14283.0    226.7      0.0      p1 = np.poly1d(z1)  # 返回值为多项式的表达式，也就是函数式子
   157                                               # print(p1)
   158        63      23313.0    370.0      0.0      y_pred = p1(x)  # 根据函数的多项式表达式，求解 y
   159                                               # print(np.polyval(p1, 29))             #根据多项式求解特定 x 对应的 y 值
   160                                               # print(np.polyval(z1, 29))             #根据多项式求解特定 x 对应的 y 值
   161
   162                                               #   plt.plot(x, y, '*', label='original values')
   163                                               #   plt.plot(x, y_pred, 'r', label='fit values')
   164                                               #   plt.title('')
   165                                               #   plt.xlabel('')
   166                                               #   plt.ylabel('')
   167                                               #   plt.legend(loc=3, borderaxespad=0., bbox_to_anchor=(0, 0))
   168                                               #   # plt.show()
   169                                               #   # saveName=tank1
   170                                               #   plt.savefig("C:/Users/Administrator/PycharmProjects/My3DProject/OutPut/Filter_{}.png".format(tank1))
   171                                               #   plt.clf()
   172                                               #   fp=open('../OutPut/test.txt','a')
   173                                               #   print('------------------------------',tank1,'---------------------------------',file=fp)
   174                                               #   print(p1,file=fp)
   175        63        817.0     13.0      0.0      tank1 += 2
   176                                             # bstart = time.time()
   177                                             # print(bstart - astart)
   178                                             # fp.close()


进程已结束,退出代码0
